import os
import sys
import pytest
# import requests
import shutil
# import requests_mock
from io import StringIO
# from bs4 import BeautifulSoup
import tempfile
from unittest.mock import patch, MagicMock
from fastapi import HTTPException
from vertexai.generative_models import ChatSession
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from api.utils.llm_rag_utils import (
    generate_query_embedding,
    create_chat_session,
    generate_chat_response,
    rebuild_chat_session,
)

# Mock environment variables
@pytest.fixture(autouse=True)
def mock_env_vars(monkeypatch):
    monkeypatch.setenv("GCP_PROJECT", "test_project")
    monkeypatch.setenv("CHROMADB_HOST", "localhost")
    monkeypatch.setenv("CHROMADB_PORT", "8000")

# Mock Vertex AI initialization
@pytest.fixture(autouse=True)
def mock_vertexai_init():
    with patch("vertexai.init") as mock_init:
        yield mock_init

# Mock TextEmbeddingModel
@pytest.fixture
def mock_text_embedding_model():
    with patch("vertexai.language_models.TextEmbeddingModel.from_pretrained") as mock_model:
        mock_instance = MagicMock()
        mock_model.return_value = mock_instance
        yield mock_instance

# Mock GenerativeModel
@pytest.fixture
def mock_generative_model():
    with patch("vertexai.generative_models.GenerativeModel") as mock_model:
        mock_instance = MagicMock()
        mock_model.return_value = mock_instance
        yield mock_instance

# Mock ChromaDB client
@pytest.fixture
def mock_chromadb_client():
    with patch("chromadb.HttpClient") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        yield mock_instance

def test_generate_query_embedding(mock_text_embedding_model):
    mock_text_embedding_model.get_embeddings.return_value = [MagicMock(values=[0.1, 0.2, 0.3])]
    query = "test query"
    embedding = generate_query_embedding(query)
    # print(embedding)
    assert embedding == [0.01972148008644581, 0.012918749824166298, -0.05420200526714325, -0.010761999525129795, 0.029271302744746208, -0.0001952383026946336, 0.015154778957366943, 0.01905100792646408, -0.035168807953596115, 0.030663147568702698, -0.0015361271798610687, 0.010683090426027775, 0.06366674602031708, -0.001701211091130972, -0.012408120557665825, -0.04841533303260803, 0.05142051726579666, 0.0326174795627594, -0.0837632566690445, 0.0006716508651152253, 0.02668137662112713, -0.033287495374679565, 0.040922198444604874, -0.0012650246499106288, -0.010435936972498894, -0.01764921098947525, -0.026816241443157196, 0.00019666175649035722, -0.006659199949353933, -0.015452002175152302, 0.07186244428157806, 0.05122813582420349, 0.007694317027926445, -0.047806669026613235, 0.011210666038095951, 0.036739423871040344, 0.009811731055378914, 0.019961737096309662, 0.020651334896683693, -0.05242464318871498, -0.06147602200508118, 0.02715657465159893, -0.02794613316655159, 0.04052809253334999, -0.029263712465763092, -0.03997669741511345, -0.0037109432741999626, 0.07189541310071945, -0.051415346562862396, 0.04886076971888542, 0.014777463860809803, 0.05128227174282074, -0.052235815674066544, 0.0347568579018116, -0.017121335491538048, -0.02287507988512516, -0.030045868828892708, -0.03366363048553467, 0.023039570078253746, -0.012165345251560211, 0.022201882675290108, -0.005756961181759834, 0.013150895945727825, -0.01044230442494154, 0.026565084233880043, -0.03484635055065155, -0.013267496600747108, -0.02650599367916584, -0.07882973551750183, 0.05523982644081116, -0.007241650018841028, 0.007705862633883953, -0.014014427550137043, -0.009069429710507393, 0.018881365656852722, -0.021623339504003525, 0.016790103167295456, -0.020703908056020737, 0.0062204464338719845, 0.051670368760824203, -0.03619202971458435, 0.04027021676301956, 0.04663725569844246, 0.05976799502968788, -0.014404662884771824, 0.010040299035608768, 0.0226370170712471, -0.08968634903430939, -0.027822041884064674, -0.009735004045069218, 0.12158145755529404, 0.05639559403061867, -0.006554648280143738, -0.018714509904384613, 0.06650090962648392, -0.023162037134170532, -0.11079013347625732, -0.10179182142019272, 0.14222484827041626, 0.042071420699357986, -0.023711787536740303, 0.0170278362929821, -0.02366422675549984, -0.06488675624132156, 0.04140474647283554, 0.04470539838075638, -0.022839931771159172, -0.04558706656098366, -0.019441206008195877, 0.024679606780409813, -0.013429800048470497, -0.02599806897342205, 0.04481670632958412, 0.005080144852399826, -0.012448560446500778, 0.026496782898902893, -0.011205771937966347, 0.0019978629425168037, -0.01872328110039234, 0.015527281910181046, 0.007970988750457764, 0.04533472657203674, 0.006471032276749611, 0.06873263418674469, 0.030392099171876907, 0.0187392495572567, 0.013242153450846672, -0.020453952252864838, -0.037844303995370865, -0.013744771480560303, 0.05340028926730156, -0.03354858607053757, 0.019633116200566292, 0.025614235550165176, -0.008752986788749695, -0.02832992933690548, 0.052895937114953995, 0.008097176440060139, 0.012533715926110744, 0.04781421273946762, -0.009420580230653286, -0.032592397183179855, -0.06806071102619171, -0.01143788080662489, -0.011697965674102306, -0.02416194975376129, 0.024413757026195526, 0.05965660512447357, -0.02801181748509407, -0.038732901215553284, -0.020436035469174385, -0.012059567496180534, 0.03903072327375412, -0.01611529104411602, 0.012651510536670685, 0.014202173799276352, 0.0348515547811985, -0.04243727773427963, 0.044020917266607285, 0.01246496383100748, 0.050347380340099335, -0.06303746998310089, 0.014212973415851593, 0.0007432355196215212, -0.03994203731417656, 0.018887890502810478, 0.0012538121081888676, -0.05577166751027107, 0.009768958203494549, 0.012826776131987572, -0.018636150285601616, -0.05419287830591202, 0.01002808939665556, -0.11045726388692856, -0.0007968448335304856, 0.020262110978364944, -0.04198189079761505, -0.00875820778310299, -0.004178403411060572, -0.0012279173824936152, 0.11016359180212021, 0.03319452330470085, -0.02937530353665352, -0.11137095093727112, 0.030890656635165215, 0.003966342657804489, 0.041188620030879974, -0.0010192134650424123, 0.10941458493471146, 0.04924390837550163, -0.004505495075136423, -0.004934592638164759, 0.0014518513344228268, 0.04070333391427994, -0.0037921047769486904, -0.025624025613069534, -0.008738971315324306, -0.0068312594667077065, -0.034867964684963226, -0.07833081483840942, 0.0546877458691597, -0.027927381917834282, -0.01977841928601265, -0.020847028121352196, -0.012898607179522514, 0.03729331120848656, -0.04932055249810219, -0.0473664216697216, -0.0007869180990383029, 0.02704884670674801, 0.006632665637880564, -0.0036557281855493784, -0.02536204643547535, -0.04376004636287689, 0.041242871433496475, -0.0059852078557014465, 0.04105980321764946, -0.01075112633407116, 0.024096623063087463, -0.017164045944809914, 0.040802646428346634, 0.0063684736378490925, 0.02993551827967167, 0.041859567165374756, 0.04032387211918831, 0.01338166929781437, -0.05771893635392189, 0.004764211364090443, 0.027430083602666855, -0.03530639782547951, 0.012619639746844769, 0.036888640373945236, 0.0407043993473053, 0.02370290271937847, -0.08455270528793335, 0.04049963504076004, 0.03307962417602539, -0.047066908329725266, -0.03971778601408005, 0.006639199797064066, -0.0215580053627491, 0.05728664621710777, 0.06493232399225235, 0.024017076939344406, 0.0470232330262661, -0.029223648831248283, 0.054503634572029114, 0.019558968022465706, 0.008268287405371666, -0.0274775642901659, 0.003958398476243019, -0.02889241836965084, -0.005402441136538982, -0.02089828811585903, -0.07384341955184937, -0.04012959450483322]
    # mock_text_embedding_model.get_embeddings.assert_called_once()

def test_create_chat_session(mock_generative_model):
    session = create_chat_session()
    assert isinstance(session, ChatSession)
    # mock_generative_model.start_chat.assert_called_once()

def test_generate_chat_response_text(mock_generative_model, mock_chromadb_client):
    chat_session = MagicMock()
    message = {"content": "test message"}
    mock_chromadb_client.get_collection.return_value.query.return_value = {
        "documents": [["chunk1", "chunk2", "chunk3"]]
    }
    response = MagicMock()
    response.text = "response text"
    chat_session.send_message.return_value = response

    result = generate_chat_response(chat_session, message)
    assert result == "response text"
    chat_session.send_message.assert_called_once()

def test_generate_chat_response_file(mock_generative_model):
    chat_session = MagicMock()
    message = {"file": [{"WBC": "5.0", "HGB": "13.0"}]}
    response = MagicMock()
    response.text = "response text"
    chat_session.send_message.return_value = response

    result = generate_chat_response(chat_session, message)
    assert result == "response text"
    chat_session.send_message.assert_called_once()

def test_generate_chat_response_error(mock_generative_model):
    chat_session = MagicMock()
    message = {"content": "test message"}
    chat_session.send_message.side_effect = Exception("Test error")

    with pytest.raises(HTTPException):
        generate_chat_response(chat_session, message)

def test_rebuild_chat_session(mock_generative_model):
    chat_history = [{"role": "user", "content": "test message"}]
    new_session = rebuild_chat_session(chat_history)
    assert isinstance(new_session, ChatSession)
    # mock_generative_model.start_chat.assert_called_once()